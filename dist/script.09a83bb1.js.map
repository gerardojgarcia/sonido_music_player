{"version":3,"sources":["main.js","script.js"],"names":["allMusic","name","artist","img","src","wrapper","document","querySelector","musicImg","musicName","musicArtist","playPauseBtn","prevBtn","nextBtn","mainAudio","progressArea","progressBar","musicList","moreMusicBtn","closemoreMusic","musicIndex","Math","floor","random","length","loadMusic","indexNumb","innerText","console","log","playMusic","classList","add","play","pauseMusic","remove","pause","prevMusic","playingSong","nextMusic","window","addEventListener","contains","e","currentTime","target","progressWidth","duration","style","width","musicCurrentTime","musicDuration","mainAdDuration","totalMin","totalSec","currentMin","currentSec","clientWidth","clickedOffsetX","offsetX","songDuration","repeatBtn","setAttribute","randIndex","toggle","click","ulTag","i","liTag","insertAdjacentHTML","liAudioDurationTag","liAudioTag","allLiTag","querySelectorAll","j","audioTag","adDuration","getAttribute","clicked","element","getLiIndex"],"mappings":"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","file":"script.09a83bb1.js","sourceRoot":"..","sourcesContent":["export {allMusic}\n\n\n\nlet allMusic = [\n    {\n        name: ' Anatolian Rock Vol. 1',\n        artist: 'Sonido Solar',\n        img: 'music-1',\n        src: 'music-1'\n\n\n    },\n    {\n        name: ' Brazilian Bossa Nova',\n        artist: 'Sonido Solar',\n        img: 'music-2',\n        src: 'music-2'\n\n\n    },\n    {\n        name: ' Female Turkish Mix',\n        artist: 'Sonido Solar',\n        img: 'music-3',\n        src: 'music-3'\n\n\n    },\n    {\n        name: ' Japan Mix Vol. 1',\n        artist: 'Sonido Solar',\n        img: 'music-4',\n        src: 'music-4'\n\n\n\n    }\n    \n\n]\n\n\n\n\n","import {allMusic} from './main.js'\n\n\nconst wrapper = document.querySelector(\".wrapper\"),\nmusicImg = wrapper.querySelector(\".img-area img\"),\nmusicName = wrapper.querySelector(\".song-details .name\"),\nmusicArtist = wrapper.querySelector(\".song-details .artist\"),\nplayPauseBtn = document.querySelector(\".play-pause\"),\nprevBtn = wrapper.querySelector(\"#prev\"),\nnextBtn = wrapper.querySelector(\"#next\"),\nmainAudio = wrapper.querySelector(\"#main-audio\"),\nprogressArea = wrapper.querySelector(\".progress-area\"),\nprogressBar = progressArea.querySelector(\".progress-bar\"),\nmusicList = wrapper.querySelector(\".music-list\"),\nmoreMusicBtn = wrapper.querySelector(\"#more-music\"),\nclosemoreMusic = musicList.querySelector(\"#close\");\n\n\n\nlet musicIndex = Math.floor((Math.random() * allMusic.length) + 1);\n\n\nwindow.addEventListener(\"load\", ()=>{\n  loadMusic(musicIndex);\n  playingSong(); \n});\n\nfunction loadMusic(indexNumb){\n  musicName.innerText = allMusic[indexNumb - 1].name;\n  musicArtist.innerText = allMusic[indexNumb - 1].artist;\n  musicImg.src = `./images/${allMusic[indexNumb - 1].img}.jpg`;\n  mainAudio.src = `Music/${allMusic[indexNumb - 1].src}.mp3`;\n  console.log(musicImg.src)\n}\n\n//play music function\nfunction playMusic(){\n  wrapper.classList.add(\"paused\");\n  playPauseBtn.querySelector(\"i\").innerText = \"pause\";\n  mainAudio.play();\n}\n\n//pause music function\nfunction pauseMusic(){\n  wrapper.classList.remove(\"paused\");\n  playPauseBtn.querySelector(\"i\").innerText = \"play_arrow\";\n  mainAudio.pause();\n}\n\n//prev music function\nfunction prevMusic(){\n  musicIndex--; //decrement of musicIndex by 1\n  //if musicIndex is less than 1 then musicIndex will be the array length so the last music play\n  musicIndex < 1 ? musicIndex = allMusic.length : musicIndex = musicIndex;\n  loadMusic(musicIndex);\n  playMusic();\n  playingSong(); \n}\n\n//next music function\nfunction nextMusic(){\n  musicIndex++; //increment of musicIndex by 1\n  //if musicIndex is greater than array length then musicIndex will be 1 so the first music play\n  musicIndex > allMusic.length ? musicIndex = 1 : musicIndex = musicIndex;\n  loadMusic(musicIndex);\n  playMusic();\n  playingSong(); \n}\n\n// play or pause button event\nplayPauseBtn.addEventListener(\"click\", ()=>{\n  const isMusicPlay = wrapper.classList.contains(\"paused\");\n  //if isPlayMusic is true then call pauseMusic else call playMusic\n  isMusicPlay ? pauseMusic() : playMusic();\n  playingSong();\n});\n\n//prev music button event\nprevBtn.addEventListener(\"click\", ()=>{\n  prevMusic();\n});\n\n//next music button event\nnextBtn.addEventListener(\"click\", ()=>{\n  nextMusic();\n});\n\n// update progress bar width according to music current time\nmainAudio.addEventListener(\"timeupdate\", (e)=>{\n  const currentTime = e.target.currentTime; //getting playing song currentTime\n  const duration = e.target.duration; //getting playing song total duration\n  let progressWidth = (currentTime / duration) * 100;\n  progressBar.style.width = `${progressWidth}%`;\n\n  let musicCurrentTime = wrapper.querySelector(\".current-time\"),\n  musicDuration = wrapper.querySelector(\".max-duration\");\n  mainAudio.addEventListener(\"loadeddata\", ()=>{\n    // update song total duration\n    let mainAdDuration = mainAudio.duration;\n    let totalMin = Math.floor(mainAdDuration / 60);\n    let totalSec = Math.floor(mainAdDuration % 60);\n    if(totalSec < 10){ //if sec is less than 10 then add 0 before it\n      totalSec = `0${totalSec}`;\n    }\n    musicDuration.innerText = `${totalMin}:${totalSec}`;\n  });\n  // update playing song current time\n  let currentMin = Math.floor(currentTime / 60);\n  let currentSec = Math.floor(currentTime % 60);\n  if(currentSec < 10){ //if sec is less than 10 then add 0 before it\n    currentSec = `0${currentSec}`;\n  }\n  musicCurrentTime.innerText = `${currentMin}:${currentSec}`;\n});\n\n// update playing song currentTime on according to the progress bar width\nprogressArea.addEventListener(\"click\", (e)=>{\n  let progressWidth = progressArea.clientWidth; //getting width of progress bar\n  let clickedOffsetX = e.offsetX; //getting offset x value\n  let songDuration = mainAudio.duration; //getting song total duration\n  \n  console.log(songDuration)\n  mainAudio.currentTime = (clickedOffsetX / progressWidth) * songDuration;\n  playMusic(); //calling playMusic function\n  playingSong();\n});\n\n//change loop, shuffle, repeat icon onclick\nconst repeatBtn = wrapper.querySelector(\"#repeat-plist\");\nrepeatBtn.addEventListener(\"click\", ()=>{\n  let getText = repeatBtn.innerText; //getting this tag innerText\n  switch(getText){\n    case \"repeat\":\n      repeatBtn.innerText = \"repeat_one\";\n      repeatBtn.setAttribute(\"title\", \"Song looped\");\n      break;\n    case \"repeat_one\":\n      repeatBtn.innerText = \"shuffle\";\n      repeatBtn.setAttribute(\"title\", \"Playback shuffled\");\n      break;\n    case \"shuffle\":\n      repeatBtn.innerText = \"repeat\";\n      repeatBtn.setAttribute(\"title\", \"Playlist looped\");\n      break;\n  }\n});\n\n//code for what to do after song ended\nmainAudio.addEventListener(\"ended\", ()=>{\n  // we'll do according to the icon means if user has set icon to\n  // loop song then we'll repeat the current song and will do accordingly\n  let getText = repeatBtn.innerText; //getting this tag innerText\n  switch(getText){\n    case \"repeat\":\n      nextMusic(); //calling nextMusic function\n      break;\n    case \"repeat_one\":\n      mainAudio.currentTime = 0; //setting audio current time to 0\n      loadMusic(musicIndex); //calling loadMusic function with argument, in the argument there is a index of current song\n      playMusic(); //calling playMusic function\n      break;\n    case \"shuffle\":\n      let randIndex = Math.floor((Math.random() * allMusic.length) + 1); //genereting random index/numb with max range of array length\n      do{\n        randIndex = Math.floor((Math.random() * allMusic.length) + 1);\n      }while(musicIndex == randIndex); //this loop run until the next random number won't be the same of current musicIndex\n      musicIndex = randIndex; //passing randomIndex to musicIndex\n      loadMusic(musicIndex);\n      playMusic();\n      playingSong();\n      break;\n  }\n});\n\n//show music list onclick of music icon\nmoreMusicBtn.addEventListener(\"click\", ()=>{\n  musicList.classList.toggle(\"show\");\n \n});\nclosemoreMusic.addEventListener(\"click\", ()=>{\n  moreMusicBtn.click();\n});\n\nconst ulTag = wrapper.querySelector(\"ul\");\n// let create li tags according to array length for list\nfor (let i = 0; i < allMusic.length; i++) {\n  //let's pass the song name, artist from the array\n  let liTag = `<li li-index=\"${i + 1}\">\n                <div class=\"row\">\n                  <span>${allMusic[i].name}</span>\n                  <p>${allMusic[i].artist}</p>\n                </div>\n                <audio class=\"${allMusic[i].src}\" src=\"Music/${allMusic[i].src}.mp3\"></audio>\n                <span id=\"${allMusic[i].src}\" class=\"audio-duration\"></span>\n                \n              </li>`;\n\n          \n  ulTag.insertAdjacentHTML(\"beforeend\", liTag); //inserting the li inside ul tag\n\n  let liAudioDurationTag = ulTag.querySelector(`#${allMusic[i].src}`);\n  \n  let liAudioTag = ulTag.querySelector(`.${allMusic[i].src}`);\n  \n\n  liAudioTag.addEventListener(\"loadeddata\", ()=>{\n    let duration = liAudioTag.duration;\n    let totalMin = Math.floor(duration / 60);\n    let totalSec = Math.floor(duration % 60);\n\n   \n    if(totalSec < 10){ //if sec is less than 10 then add 0 before it\n      totalSec = `0${totalSec}`;\n    };\n    liAudioDurationTag.innerText = `${totalMin}:${totalSec}`; //passing total duation of song\n    liAudioDurationTag.setAttribute(\"t-duration\", `${totalMin}:${totalSec}`); //adding t-duration attribute with total duration value\n\n    \n\n  });\n  \n}\n\n//play particular song from the list onclick of li tag\nfunction playingSong(){\n  const allLiTag = ulTag.querySelectorAll(\"li\");\n\n  \n  for (let j = 0; j < allLiTag.length; j++) {\n    let audioTag = allLiTag[j].querySelector(\".audio-duration\");\n    \n    if(allLiTag[j].classList.contains(\"playing\")){\n      allLiTag[j].classList.remove(\"playing\");\n      let adDuration = audioTag.getAttribute(\"t-duration\");\n      audioTag.innerText = adDuration;\n    }\n\n    //if the li tag index is equal to the musicIndex then add playing class in it\n    if(allLiTag[j].getAttribute(\"li-index\") == musicIndex){\n      allLiTag[j].classList.add(\"playing\");\n      audioTag.innerText = \"Playing\";\n    }\n\n    allLiTag[j].setAttribute(\"onclick\", \"clicked(this)\");\n  }\n\n  console.log(allLiTag) \n}\n\n//particular li clicked function\nfunction clicked(element) {\n  let getLiIndex = element.getAttribute(\"li-index\");\n  musicIndex = getLiIndex; //updating current song index with clicked li index\n  loadMusic(musicIndex);\n  playMusic();\n  playingSong();\n  console.log(clicked())\n  \n}\n\n"]}